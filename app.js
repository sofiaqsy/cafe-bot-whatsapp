/**
 * CAFE BOT - WhatsApp Bot for Coffee Shop
 * Main Application Entry Point
 * Version: 5.0.0 (Refactored)
 * 
 * This is the refactored version with modular architecture
 * Original bot-final.js has been split into multiple modules for better maintainability
 */

const express = require('express');
const dotenv = require('dotenv');
const path = require('path');

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();

// Import modules
const config = require('./config');
const serviceInitializer = require('./service-initializer');
const stateManager = require('./state-manager');
const messageService = require('./message-service');
const orderHandler = require('./order-handler');
const sheetsService = require('./sheets-service');

// Import routes
const homeRoutes = require('./home-routes');
const webhookRoute = require('./webhook-route');
const adminRoute = require('./admin-route');
const webhookEstado = require('./webhook-estado');
const webhookCliente = require('./webhook-cliente');
// Setup middleware
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.use(express.static('public'));

// Setup routes
app.use('/', homeRoutes);
app.use('/webhook', webhookRoute);
app.use('/admin', adminRoute);
app.use('/', webhookEstado); // Webhook de estado en la ra√≠z
app.use('/', webhookCliente); // Webhook de clientes

// Ruta para status callbacks de Twilio
app.post('/status', (req, res) => {
    const { MessageStatus, MessageSid, ErrorCode, ErrorMessage, To } = req.body;
    
    // Log el status del mensaje
    if (ErrorCode) {
        console.error(`‚ùå Error en mensaje ${MessageSid}:`);
        console.error(`   C√≥digo: ${ErrorCode}`);
        console.error(`   Mensaje: ${ErrorMessage}`);
        console.error(`   Destinatario: ${To}`);
    } else {
        console.log(`üìä Status update:`);
        console.log(`   Estado: ${MessageStatus}`);
        console.log(`   ID: ${MessageSid}`);
        console.log(`   Para: ${To}`);
    }
    
    // Siempre responder 200 a Twilio
    res.sendStatus(200);
});
// Error handling middleware
app.use((error, req, res, next) => {
    console.error('‚ùå Error:', error);
    res.status(500).json({
        error: 'Internal server error',
        message: config.app.isDevelopment ? error.message : 'Something went wrong'
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({
        error: 'Not Found',
        message: `Cannot ${req.method} ${req.url}`
    });
});

/**
 * Initialize application
 */
async function initializeApp() {
    try {
        console.log('\nüöÄ Iniciando Caf√© Bot v5.0 (Refactorizado)...\n');
        
        // Initialize all services
        const services = await serviceInitializer.initialize();
        
        // Make services available globally through app.locals
        app.locals.services = services;
        app.locals.config = config;
        app.locals.stateManager = stateManager;
        
        // Start server
        const PORT = config.app.port;
        
        app.listen(PORT, () => {
            console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë       ‚òï CAF√â BOT v5.0 INICIADO ‚òï         ‚ïë
‚ïë         (Arquitectura Modular)              ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üìç Puerto: ${PORT.toString().padEnd(31)}‚ïë
‚ïë  üåê URL: http://localhost:${PORT.toString().padEnd(17)}‚ïë
‚ïë  üì± Webhook: /webhook                      ‚ïë
‚ïë  üîß Test: /test                            ‚ïë
‚ïë  üìä Admin: /admin                          ‚ïë
‚ïë  üíö Health: /health                        ‚ïë
‚ïë  ‚öôÔ∏è  Modo: ${config.app.isDevelopment ? 'üîß DESARROLLO' : '‚úÖ PRODUCCI√ìN'}                  ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üì¶ M√≥dulos Cargados:                      ‚ïë
‚ïë  ‚úÖ config.js - Configuraci√≥n              ‚ïë
‚ïë  ‚úÖ state-manager.js - Estados             ‚ïë
‚ïë  ‚úÖ message-service.js - Mensajes          ‚ïë
‚ïë  ‚úÖ order-handler.js - Pedidos             ‚ïë
‚ïë  ‚úÖ product-catalog.js - Productos         ‚ïë
‚ïë  ‚úÖ service-initializer.js - Servicios     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üîå Servicios Externos:                    ‚ïë
‚ïë  ${services.sheets ? '‚úÖ' : '‚ùå'} Google Sheets                        ‚ïë
‚ïë  ${services.drive ? '‚úÖ' : '‚ùå'} Google Drive                          ‚ïë
‚ïë  ${services.twilio ? '‚úÖ' : '‚ùå'} Twilio WhatsApp                      ‚ïë
‚ïë  ${services.notifications ? '‚úÖ' : '‚ùå'} Notificaciones                       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üìà Arquitectura Mejorada:                 ‚ïë
‚ïë  ‚Ä¢ C√≥digo modular y mantenible             ‚ïë
‚ïë  ‚Ä¢ Separaci√≥n de responsabilidades         ‚ïë
‚ïë  ‚Ä¢ Gesti√≥n centralizada de estado          ‚ïë
‚ïë  ‚Ä¢ Configuraci√≥n unificada                 ‚ïë
‚ïë  ‚Ä¢ Manejo robusto de errores               ‚ïë
‚ïë  ‚Ä¢ Servicios desacoplados                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${config.app.isDevelopment ? 'üí° Modo desarrollo: Los mensajes se mostrar√°n en consola\n' : ''}
üìö Documentaci√≥n: Ver README-REFACTORED.md
üîß Configuraci√≥n: Editar archivo .env
            `);
        });
        
    } catch (error) {
        console.error('‚ùå Error fatal iniciando la aplicaci√≥n:', error);
        process.exit(1);
    }
}

// Handle graceful shutdown
process.on('SIGTERM', async () => {
    console.log('\nüîÑ SIGTERM recibido, cerrando servidor...');
    await serviceInitializer.shutdown();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('\nüîÑ SIGINT recibido, cerrando servidor...');
    await serviceInitializer.shutdown();
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå Unhandled Rejection:', error);
    process.exit(1);
});

// Initialize application
initializeApp();

module.exports = app;
