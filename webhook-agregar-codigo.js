// ============================================
// C√ìDIGO PARA AGREGAR AL webhook-estado.js EXISTENTE
// Solo agrega estas funciones sin modificar lo que ya tienes
// ============================================

// En tu webhook principal, modifica para manejar ambos tipos:
router.post('/webhook-estado', verificarToken, async (req, res) => {
    try {
        console.log('üì® Webhook recibido:', JSON.stringify(req.body, null, 2));
        
        const { tipo } = req.body;
        
        // AGREGAR ESTE SWITCH para manejar diferentes tipos
        if (tipo === 'aprobacion_cliente') {
            // NUEVA: Manejar aprobaci√≥n de cliente
            return await manejarAprobacionCliente(req, res);
        } else {
            // EXISTENTE: Tu c√≥digo actual para pedidos
            // ... tu c√≥digo actual aqu√≠ ...
        }
        
    } catch (error) {
        console.error('‚ùå Error en webhook:', error);
        res.status(500).json({ error: 'Error procesando webhook' });
    }
});

// ============================================
// AGREGAR ESTA NUEVA FUNCI√ìN
// ============================================
async function manejarAprobacionCliente(req, res) {
    try {
        const { cliente, estado, metadata } = req.body;
        
        // Validar datos requeridos
        if (!cliente?.id || !cliente?.whatsapp || !estado?.nuevo) {
            return res.status(400).json({ 
                error: 'Datos incompletos para aprobaci√≥n de cliente',
                requeridos: ['cliente.id', 'cliente.whatsapp', 'estado.nuevo'],
                recibido: req.body
            });
        }
        
        const numeroWhatsApp = cliente.whatsapp.replace('whatsapp:', '');
        
        // Construir mensaje seg√∫n el estado
        let mensaje;
        
        if (estado.nuevo === 'Verificado') {
            // Mensaje de APROBACI√ìN
            mensaje = `üéâ *¬°FELICITACIONES!*\n\n`;
            mensaje += `Tu registro ha sido *APROBADO* ‚úÖ\n\n`;
            
            if (cliente.empresa) {
                mensaje += `*Empresa:* ${cliente.empresa}\n`;
            }
            if (cliente.contacto) {
                mensaje += `*Contacto:* ${cliente.contacto}\n`;
            }
            
            mensaje += `\nüìã *Beneficios de ser cliente verificado:*\n`;
            mensaje += `‚Ä¢ Acceso completo a nuestro cat√°logo\n`;
            mensaje += `‚Ä¢ Precios especiales por volumen\n`;
            mensaje += `‚Ä¢ Atenci√≥n prioritaria\n`;
            mensaje += `‚Ä¢ Seguimiento de pedidos en tiempo real\n`;
            
            mensaje += `\nüõçÔ∏è *¬øC√≥mo hacer tu primer pedido?*\n`;
            mensaje += `1. Escribe "cat√°logo" para ver productos\n`;
            mensaje += `2. Selecciona el caf√© que desees\n`;
            mensaje += `3. Indica la cantidad en kg\n`;
            mensaje += `4. Confirma tu pedido\n`;
            
            mensaje += `\n¬°Bienvenido a nuestra familia cafetera! ‚òï`;
            
        } else if (estado.nuevo === 'Rechazado') {
            // Mensaje de RECHAZO
            mensaje = `üìã *ACTUALIZACI√ìN DE TU REGISTRO*\n\n`;
            mensaje += `Lamentamos informarte que tu registro no ha podido ser aprobado en este momento.\n\n`;
            
            mensaje += `*Posibles razones:*\n`;
            mensaje += `‚Ä¢ Informaci√≥n incompleta\n`;
            mensaje += `‚Ä¢ Zona de cobertura no disponible\n`;
            mensaje += `‚Ä¢ Datos de contacto incorrectos\n`;
            
            mensaje += `\nüìû *¬øQu√© puedes hacer?*\n`;
            mensaje += `‚Ä¢ Verifica que tus datos sean correctos\n`;
            mensaje += `‚Ä¢ Aseg√∫rate de incluir una foto clara de tu local\n`;
            mensaje += `‚Ä¢ Cont√°ctanos directamente para m√°s informaci√≥n\n`;
            
            mensaje += `\nPuedes volver a registrarte cuando gustes.`;
            
        } else {
            // Estado no reconocido
            console.log('‚ö†Ô∏è Estado de cliente no reconocido:', estado.nuevo);
            return res.status(400).json({ 
                error: 'Estado de cliente no v√°lido',
                estados_validos: ['Verificado', 'Rechazado'],
                recibido: estado.nuevo
            });
        }
        
        // Agregar pie del mensaje
        mensaje += `\n\n_${new Date().toLocaleString('es-PE', { timeZone: 'America/Lima' })}_`;
        
        // Enviar mensaje por WhatsApp usando tu funci√≥n existente
        // IMPORTANTE: Usa tu funci√≥n actual de env√≠o
        await enviarMensajeWhatsApp(numeroWhatsApp, mensaje);
        
        // Si el cliente fue verificado, opcionalmente enviar el cat√°logo
        if (estado.nuevo === 'Verificado') {
            // Opcional: Enviar cat√°logo despu√©s de 3 segundos
            setTimeout(async () => {
                // Si tienes una funci√≥n para enviar el cat√°logo, √∫sala aqu√≠
                // await enviarCatalogo(numeroWhatsApp);
            }, 3000);
        }
        
        console.log(`‚úÖ Notificaci√≥n de ${estado.nuevo} enviada a ${numeroWhatsApp}`);
        res.status(200).json({ 
            success: true,
            tipo: 'aprobacion_cliente',
            cliente_id: cliente.id,
            estado: estado.nuevo,
            mensaje: `Notificaci√≥n de ${estado.nuevo} enviada`
        });
        
    } catch (error) {
        console.error('‚ùå Error manejando aprobaci√≥n de cliente:', error);
        res.status(500).json({ error: 'Error procesando aprobaci√≥n de cliente' });
    }
}

// ============================================
// FIN DEL C√ìDIGO A AGREGAR
// ============================================
